>
  {# Daily Briefing #}

  {%- macro getReport() -%}
      <p>
        {% if now().strftime('%H')|int < 12 %}
          Good morning.
        {% elif now().strftime('%H')|int >= 12 and now().strftime('%H')|int < 17 %}
          Good afternoon.
        {% else %}
          Good evening.
        {% endif %}
      </p>

      
        {% if is_state('binary_sensor.morning','on') %}
          <p> 
            Today is {{states.sensor.today_is.state }}, {{ as_timestamp(now()) | timestamp_custom('%B %d %Y') }}.
          </p>
        {% else %}
          <p>
            It is {{ now().strftime("%I:%M %p") }}
          </p>
        {% endif %}
      
      
      <p>
        The Weather in Woodstock is {{states('sensor.temperature')|round}} degrees 
        {% if is_state('weather.woodstock', 'rainy') %}
          {{ [
          'with rain.', 
          'with showers.'
          ] | random }}
        {% elif is_state('weather.woodstock', 'cloudy') %}
          {{ [
          'with clouds.', 
          'with cloudy skies.'
          ] | random }}
        {% elif is_state('weather.woodstock', 'partlycloudy') %}
          {{ [
          'with some clouds.', 
          'with partly cloudy skies.',
          'with scattered clouds'
          ] | random }}
        {% elif is_state('weather.woodstock', 'sunny') %}
          {% if is_state('sun.sun', 'above_horizon') %}
            {{ [
            'and sunny.', 
            'with sun.'
            ] | random }}
          {% else %}
            {{ [
            'and clear.', 
            'with clear skies.'
            ] | random }}
          {% endif %}
        {% else %}
          and {{ states.weather.woodstock.state }}
        {% endif %}

      </p>            
      
      <p>
        {% if is_state('sun.sun', 'below_horizon') %}
          You have
          {% set seconds = as_timestamp(states.sun.sun.attributes.next_rising)-now().timestamp() %}
          {% set hours = seconds / 60 %}
          {% if seconds / ( 60 * 60 ) > 1 %}
            {{ (seconds //  ( 60 * 60 )) | int }} hours
          {% else %}
            {{ (seconds // 60) | int }} minutes
          {% endif %}
          {{ [
            'until the sun rises.',
            'until the sun is up.',
            'before the sun officially rises. '
          ]|random }}
        {% else %}
          You have
          {% set seconds = as_timestamp(states.sun.sun.attributes.next_setting)-now().timestamp() %}
          {% set hours = seconds / 60 %}
          {% if seconds / ( 60 * 60 ) > 1 %}
            {{ (seconds //  ( 60 * 60 )) | int }} hours
          {% else %}
            {{ (seconds // 60) | int }} minutes
          {% endif %}
          {{ [
            'until the sun sets for the day.',
            'until the sun slips below the horizon.',
            'before the sun officially sets. '
          ]|random }}
        {% endif %}
      
      </p>

      
      {% if is_state('binary_sensor.morning','on') %}
        <p>
        Overnight,

        {%- if is_state('sensor.front_door_motion_away_count','0') %}
          There was no motion detected at the front door.
        {% else %}
          I detected motion at the front door {{ states.sensor.front_door_motion_away_count.state | int }} times.
        {% endif %}
        </p>
      {% endif %}
      
      {% set dow = as_timestamp(now()) | timestamp_custom('%A') %}
      
    
      
        
      <p>
        Around the house,


          {%- if is_state('climate.thermostat','off') %}
            The internal climate control system is off. The temperature inside is {{ states.climate.thermostat.attributes.current_temperature }} degrees. 
          {%- elif is_state('climate.thermostat','heat_cool') %}
            The internal climate control system will try to keep the temperature between {{ states.climate.thermostat.attributes.target_temp_low }} and {{ states.climate.thermostat.attributes.target_temp_high }} degrees.
          {% else %}
            The internal climate control system is set to {{ states.climate.thermostat.state }} with a current temperature of {{ states.climate.thermostat.attributes.current_temperature }} which is 
            
              {%- if states.climate.thermostat.attributes.current_temperature | int - states.climate.thermostat.attributes.temperature | int |round > 0 %}
                {{ states.climate.thermostat.attributes.current_temperature | int - states.climate.thermostat.attributes.temperature | int }} degrees above 
              {%- elif states.climate.thermostat.attributes.current_temperature | int - states.climate.thermostat.attributes.temperature | int |round < 0 %}
                {{ (states.climate.thermostat.attributes.current_temperature | int - states.climate.thermostat.attributes.temperature | int) | abs }} degrees below
              {% else %}
                right at 
              {% endif %}
              the set point of {{ states.climate.thermostat.attributes.temperature }}
            degrees.
          {%- endif -%}
          And The internal humidity is currently {{ states.climate.thermostat.attributes.current_humidity }} percent.
          {# The garage is {{states.sensor.acurite_tower_10968_t.state|round}} degrees with a humidity of {{states.sensor.acurite_tower_10968_h.state|round}} percent. #}

          {%- if is_state('media_player.living_room','playing') or is_state('binary_sensor.basement_occupancy','on') %}
            There appears to be activity in the basement.
            {%- if is_state('media_player.living_room','playing') %}
            The basement TV is currently playing 
              {%- if states.media_player.living_room.attributes.app_name == 'YouTube' %}
                You Tube.
              {% else %}
                {{ states.media_player.living_room.attributes.app_name }}.
              {%- endif -%}
            {%- endif -%}
          {%- endif -%}

           There are currently {{ (states.light | selectattr('state', 'eq', 'on') | list | count) | int + (states.switch | selectattr('state', 'eq', 'on') | list | count) | int }} lights
          and switches on. 
            
         </p>
  {%- endmacro -%}


  {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
    {%- macro cleanup(data) -%}
      {%- for item in data.split("\n")  if item | trim != "" -%}
        {{ item | trim }} {% endfor -%}
  {%- endmacro -%}

  {# a macro to call all macros :)  #}
    {%- macro mother_of_all_macros() -%}
      {{ getReport() }}
    {%- endmacro -%}
    
    {# Call the macro  #}
    {{- cleanup(mother_of_all_macros()) -}}